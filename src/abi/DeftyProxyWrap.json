{
  "contractName": "DeftyProxyWrap",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x01ffc9a7"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x06fdde03"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x081812fc"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x095ea7b3"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x18160ddd"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cdpRegistry",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x2294e787"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x23b872dd"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x2f745c59"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x42842e0e"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x4f6ccce7"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "cup",
          "type": "bytes32"
        }
      ],
      "name": "getStatus",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x5de28ae0"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "cup",
          "type": "bytes32"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "name": "nft",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x5f029ebe"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x6352211e"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "proofRegistery",
      "outputs": [
        {
          "name": "cup",
          "type": "bytes32"
        },
        {
          "name": "nft",
          "type": "uint256"
        },
        {
          "name": "lad",
          "type": "address"
        },
        {
          "name": "state",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x6da039c9"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x70a08231"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x715018a6"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "cup",
          "type": "bytes32"
        }
      ],
      "name": "gettoken",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x75562313"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8da5cb5b"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8f32d59b"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x95d89b41"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xa22cb465"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tubAddress",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xb712d04a"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xb88d4fde"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xc87b56dd"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tubAddress_",
          "type": "address"
        }
      ],
      "name": "setTubAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xca7052a3"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "getCupId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xd0d81a18"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "cup",
          "type": "bytes32"
        }
      ],
      "name": "proveOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xd2491dc9"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xde0e9a3e"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xe985e9c5"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xf2fde38b"
    },
    {
      "inputs": [
        {
          "name": "tubAddress_",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor",
      "signature": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "cup",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "Proved",
      "type": "event",
      "signature": "0xde68e8fb4a0d0fe78d961a290701a337c26e57c7e5d112ff157df58bced5cedd"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "cup",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "Wrapped",
      "type": "event",
      "signature": "0xf3696bf22477a6cf61e4692b216e2b7ddc6ab3428b84ed080bce454958bb831a"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "cup",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "Unwrapped",
      "type": "event",
      "signature": "0xa60234374090460a38b4de14e1750b399877d0637b555b04c0794778bfb35164"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event",
      "signature": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event",
      "signature": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event",
      "signature": "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event",
      "signature": "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "cup",
          "type": "bytes32"
        },
        {
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "prooveProxyOwnerShip",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x3bbcb1b5"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b5060405160208062003d62833981018060405260208110156200003357600080fd5b8101908080519060200190929190505050806040805190810160405280600a81526020017f4465667479546f6b656e000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f44545900000000000000000000000000000000000000000000000000000000008152508181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3620001ac6301ffc9a77c010000000000000000000000000000000000000000000000000000000002620002bb640100000000026401000000009004565b620001e96380ac58cd7c010000000000000000000000000000000000000000000000000000000002620002bb640100000000026401000000009004565b6200022663780e9d637c010000000000000000000000000000000000000000000000000000000002620002bb640100000000026401000000009004565b81600a90805190602001906200023e929190620004a2565b5080600b908051906020019062000257929190620004a2565b5062000295635b5e139f7c010000000000000000000000000000000000000000000000000000000002620002bb640100000000026401000000009004565b50505050620002b38162000379640100000000026401000000009004565b505062000551565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515156200030d57600080fd5b6001806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6200039262000479640100000000026401000000009004565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f556e617574686f7269736564000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004e557805160ff191683800117855562000516565b8280016001018555821562000516579182015b8281111562000515578251825591602001919060010190620004f8565b5b50905062000525919062000529565b5090565b6200054e91905b808211156200054a57600081600090555060010162000530565b5090565b90565b61380180620005616000396000f3fe60806040526004361061018b576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461019057806306fdde0314610202578063081812fc14610292578063095ea7b31461030d57806318160ddd146103685780632294e7871461039357806323b872dd146103e25780632f745c591461045d5780633bbcb1b5146104cc57806342842e0e1461053f5780634f6ccce7146105ba5780635de28ae0146106095780635f029ebe146106665780636352211e146106b55780636da039c91461073057806370a08231146107ce578063715018a614610833578063755623131461084a5780638da5cb5b146108995780638f32d59b146108f057806395d89b411461091f578063a22cb465146109af578063b712d04a14610a0c578063b88d4fde14610a63578063c87b56dd14610b75578063ca7052a314610c29578063d0d81a1814610c7a578063d2491dc914610cc9578063de0e9a3e14610d04578063e985e9c514610d57578063f2fde38b14610de0575b600080fd5b34801561019c57600080fd5b506101e8600480360360208110156101b357600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610e31565b604051808215151515815260200191505060405180910390f35b34801561020e57600080fd5b50610217610e99565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025757808201518184015260208101905061023c565b50505050905090810190601f1680156102845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029e57600080fd5b506102cb600480360360208110156102b557600080fd5b8101908080359060200190929190505050610f3b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031957600080fd5b506103666004803603604081101561033057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f8c565b005b34801561037457600080fd5b5061037d6110d1565b6040518082815260200191505060405180910390f35b34801561039f57600080fd5b506103cc600480360360208110156103b657600080fd5b81019080803590602001909291905050506110de565b6040518082815260200191505060405180910390f35b3480156103ee57600080fd5b5061045b6004803603606081101561040557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110f6565b005b34801561046957600080fd5b506104b66004803603604081101561048057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061111b565b6040518082815260200191505060405180910390f35b3480156104d857600080fd5b50610525600480360360408110156104ef57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611192565b604051808215151515815260200191505060405180910390f35b34801561054b57600080fd5b506105b86004803603606081101561056257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115f2565b005b3480156105c657600080fd5b506105f3600480360360208110156105dd57600080fd5b8101908080359060200190929190505050611613565b6040518082815260200191505060405180910390f35b34801561061557600080fd5b506106426004803603602081101561062c57600080fd5b810190808035906020019092919050505061164b565b6040518082600381111561065257fe5b60ff16815260200191505060405180910390f35b34801561067257600080fd5b5061069f6004803603602081101561068957600080fd5b8101908080359060200190929190505050611678565b6040518082815260200191505060405180910390f35b3480156106c157600080fd5b506106ee600480360360208110156106d857600080fd5b8101908080359060200190929190505050611ae1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561073c57600080fd5b506107696004803603602081101561075357600080fd5b8101908080359060200190929190505050611b5f565b604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260038111156107b757fe5b60ff16815260200194505050505060405180910390f35b3480156107da57600080fd5b5061081d600480360360208110156107f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bbc565b6040518082815260200191505060405180910390f35b34801561083f57600080fd5b50610848611c40565b005b34801561085657600080fd5b506108836004803603602081101561086d57600080fd5b8101908080359060200190929190505050611d12565b6040518082815260200191505060405180910390f35b3480156108a557600080fd5b506108ae611d32565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108fc57600080fd5b50610905611d5b565b604051808215151515815260200191505060405180910390f35b34801561092b57600080fd5b50610934611db2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610974578082015181840152602081019050610959565b50505050905090810190601f1680156109a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109bb57600080fd5b50610a0a600480360360408110156109d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611e54565b005b348015610a1857600080fd5b50610a21611f90565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a6f57600080fd5b50610b7360048036036080811015610a8657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610aed57600080fd5b820183602082011115610aff57600080fd5b80359060200191846001830284011164010000000083111715610b2157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611fb6565b005b348015610b8157600080fd5b50610bae60048036036020811015610b9857600080fd5b8101908080359060200190929190505050611fde565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bee578082015181840152602081019050610bd3565b50505050905090810190601f168015610c1b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c3557600080fd5b50610c7860048036036020811015610c4c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120a7565b005b348015610c8657600080fd5b50610cb360048036036020811015610c9d57600080fd5b8101908080359060200190929190505050612195565b6040518082815260200191505060405180910390f35b348015610cd557600080fd5b50610d0260048036036020811015610cec57600080fd5b81019080803590602001909291905050506121b2565b005b348015610d1057600080fd5b50610d3d60048036036020811015610d2757600080fd5b8101908080359060200190929190505050612499565b604051808215151515815260200191505060405180910390f35b348015610d6357600080fd5b50610dc660048036036040811015610d7a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612734565b604051808215151515815260200191505060405180910390f35b348015610dec57600080fd5b50610e2f60048036036020811015610e0357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127c8565b005b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f315780601f10610f0657610100808354040283529160200191610f31565b820191906000526020600020905b815481529060010190602001808311610f1457829003601f168201915b5050505050905090565b6000610f46826127e7565b1515610f5157600080fd5b6003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610f9782611ae1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610fd457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061101457506110138133612734565b5b151561101f57600080fd5b826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600880549050905090565b60106020528060005260406000206000915090505481565b6111003382612859565b151561110b57600080fd5b6111168383836128ee565b505050565b600061112683611bbc565b8210151561113357600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561117f57fe5b9060005260206000200154905092915050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083905060008173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d602081101561124d57600080fd5b810190808051906020019092919050505090508473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663de5f5517886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d602081101561130e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156113d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f546865206d73672e73656e646572206973206e6f7420746865206f776e65722081526020017f6f6620746865204344500000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611499576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001807f556e617574686f72697365642c206d73672e73656e646572206973206e6f742081526020017f74686520617574686f72697a656420746f2075736520746869732070726f787981525060400191505060405180910390fd5b85600f60008881526020019081526020016000206000018190555033600f600088815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600f600088815260200190815260200160002060020160146101000a81548160ff0219169083600381111561153c57fe5b02179055507fde68e8fb4a0d0fe78d961a290701a337c26e57c7e5d112ff157df58bced5cedd3387600f60008a815260200190815260200160002060020160149054906101000a900460ff16604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260038111156115d057fe5b60ff168152602001935050505060405180910390a16001935050505092915050565b61160e8383836020604051908101604052806000815250611fb6565b505050565b600061161d6110d1565b8210151561162a57600080fd5b60088281548110151561163957fe5b90600052602060002001549050919050565b6000600f600083815260200190815260200160002060020160149054906101000a900460ff169050919050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060038111156116ad57fe5b600f600085815260200190815260200160002060020160149054906101000a900460ff1660038111156116dc57fe5b14151515611778576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f596f75206d7573742070726f76654f776e6572736869702829206f662043445081526020017f206265666f7265207772617070696e670000000000000000000000000000000081525060400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600f600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f596f75206d75737420626520746865206c616420696e206f7264657220746f2081526020017f777261702061204344500000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663de5f5517856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156118fb57600080fd5b505afa15801561190f573d6000803e3d6000fd5b505050506040513d602081101561192557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161415156119e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e8152602001807f596f75206d75737420676976652829207468652043445020746f20746869732081526020017f636f6e7472616374206265666f72652063616c6c696e6720777261702829000081525060400191505060405180910390fd5b6119f1600d612912565b91506119fd3383612933565b81600f6000858152602001908152602001600020600101819055506002600f600085815260200190815260200160002060020160146101000a81548160ff02191690836003811115611a4b57fe5b02179055508260106000848152602001908152602001600020819055507ff3696bf22477a6cf61e4692b216e2b7ddc6ab3428b84ed080bce454958bb831a338484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611b5657600080fd5b80915050919050565b600f6020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16905084565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611bf957600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611c48611d5b565b1515611c5357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600f6000838152602001908152602001600020600101549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6060600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e4a5780601f10611e1f57610100808354040283529160200191611e4a565b820191906000526020600020905b815481529060010190602001808311611e2d57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611e8f57600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611fc18484846110f6565b611fcd84848484612954565b1515611fd857600080fd5b50505050565b6060611fe9826127e7565b1515611ff457600080fd5b600c60008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561209b5780601f106120705761010080835404028352916020019161209b565b820191906000526020600020905b81548152906001019060200180831161207e57829003601f168201915b50505050509050919050565b6120af611d32565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f556e617574686f7269736564000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060106000838152602001908152602001600020549050919050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663de5f5517846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d602081101561228757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515612349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f546865206d73672e73656e646572206973206e6f7420746865206f776e65722081526020017f6f6620746865204344500000000000000000000000000000000000000000000081525060400191505060405180910390fd5b81600f60008481526020019081526020016000206000018190555033600f600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600f600084815260200190815260200160002060020160146101000a81548160ff021916908360038111156123ec57fe5b02179055507fde68e8fb4a0d0fe78d961a290701a337c26e57c7e5d112ff157df58bced5cedd3383600f600086815260200190815260200160002060020160149054906101000a900460ff16604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182600381111561248057fe5b60ff168152602001935050505060405180910390a15050565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000601060008581526020019081526020016000205490506124e284611ae1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f4f6e6c792074686520445954206f776e65722063616e20756e7772617020746881526020017f65204e465400000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663baa8529c82336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561264d57600080fd5b505af1158015612661573d6000803e3d6000fd5b5050505061266e84612b77565b60106000858152602001908152602001600020506003600f600083815260200190815260200160002060020160146101000a81548160ff021916908360038111156126b557fe5b02179055507fa60234374090460a38b4de14e1750b399877d0637b555b04c0794778bfb35164338286604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6127d0611d5b565b15156127db57600080fd5b6127e481612b8c565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60008061286583611ae1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806128d457508373ffffffffffffffffffffffffffffffffffffffff166128bc84610f3b565b73ffffffffffffffffffffffffffffffffffffffff16145b806128e557506128e48185612734565b5b91505092915050565b6128f9838383612c86565b6129038382612eeb565b61290d828261308f565b505050565b60006001826000016000828254019250508190555081600001549050919050565b61293d8282613156565b612947828261308f565b612950816132ef565b5050565b60006129758473ffffffffffffffffffffffffffffffffffffffff1661333b565b15156129845760019050612b6f565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612a7b578082015181840152602081019050612a60565b50505050905090810190601f168015612aa85780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612aca57600080fd5b505af1158015612ade573d6000803e3d6000fd5b505050506040513d6020811015612af457600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b612b89612b8382611ae1565b8261334e565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612bc857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8273ffffffffffffffffffffffffffffffffffffffff16612ca682611ae1565b73ffffffffffffffffffffffffffffffffffffffff16141515612cc857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612d0457600080fd5b612d0d816133ad565b612d606001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461346d90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612df66001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461348f90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000612f436001600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061346d90919063ffffffff16565b90506000600760008481526020019081526020016000205490508181141515613036576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515612fb457fe5b9060005260206000200154905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561300e57fe5b9060005260206000200181905550816007600083815260200190815260200160002081905550505b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003613088919061373c565b5050505050565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506007600083815260200190815260200160002081905550600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561319257600080fd5b61319b816127e7565b1515156131a757600080fd5b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061324c6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461348f90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600080823b905060008111915050919050565b61335882826134b0565b6000600c60008381526020019081526020016000208054600181600116156101000203166002900490501415156133a957600c600082815260200190815260200160002060006133a89190613768565b5b5050565b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561346a5760006003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600082821115151561347e57600080fd5b600082840390508091505092915050565b60008082840190508381101515156134a657600080fd5b8091505092915050565b6134ba82826134ea565b6134c48282612eeb565b600060076000838152602001908152602001600020819055506134e68161367e565b5050565b8173ffffffffffffffffffffffffffffffffffffffff1661350a82611ae1565b73ffffffffffffffffffffffffffffffffffffffff1614151561352c57600080fd5b613535816133ad565b6135886001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461346d90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000613699600160088054905061346d90919063ffffffff16565b905060006009600084815260200190815260200160002054905060006008838154811015156136c457fe5b90600052602060002001549050806008838154811015156136e157fe5b9060005260206000200181905550816009600083815260200190815260200160002081905550600880548091906001900361371c919061373c565b506000600960008681526020019081526020016000208190555050505050565b8154818355818111156137635781836000526020600020918201910161376291906137b0565b5b505050565b50805460018160011615610100020316600290046000825580601f1061378e57506137ad565b601f0160209004906000526020600020908101906137ac91906137b0565b5b50565b6137d291905b808211156137ce5760008160009055506001016137b6565b5090565b9056fea165627a7a723058209bcf3c8df2a507f12b8d7b60bf2fd443e5c314e14a4c3ee34264aea058798bd10029",
  "deployedBytecode": "",
  "sourceMap": "179:873:0:-;;;221:75;8:9:-1;5:2;;;30:1;27;20:12;5:2;221:75:0;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;221:75:0;;;;;;;;;;;;;;;;268:11;474:155:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;551:4;557:6;524:10:24;515:6;;:19;;;;;;;;;;;;;;;;;;582:6;;;;;;;;;;;549:40;;578:1;549:40;;;;;;;;;;;;640::21;236:10;659:20;;640:18;;;:40;;;:::i;:::-;1906::25;1163:10;1925:20;;1906:18;;;:40;;;:::i;:::-;1240:51:26;855:10;1259:31;;1240:18;;;:51;;;:::i;:::-;746:4:28;738:5;:12;;;;;;;;;;;;:::i;:::-;;770:6;760:7;:16;;;;;;;;;;;;:::i;:::-;;864:49;428:10;883:29;;864:18;;;:49;;;:::i;:::-;666:254;;474:155:27;;1016:26:1;1030:11;1016:13;;;:26;;;:::i;:::-;914:133;221:75:0;179:873;;990:158:21;1080:10;1065:25;;:11;:25;;;;;1057:34;;;;;;;;1137:4;1101:20;:33;1122:11;1101:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;990:158;:::o;1051:138:1:-;1130:7;:5;;;:7;;;:::i;:::-;1116:21;;:10;:21;;;1108:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1173:11;1160:10;;:24;;;;;;;;;;;;;;;;;;1051:138;:::o;659:77:24:-;697:7;723:6;;;;;;;;;;;716:13;;659:77;:::o;179:873:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "179:873:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:133:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;778:133:21;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;778:133:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:83:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1024:83:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1024:83:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3705:151:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3705:151:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3705:151:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3128:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3128:292:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3128:292:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2005:94:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2005:94:26;;;;;;;;;;;;;;;;;;;;;;;676:46:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;676:46:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;676:46:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5260:180:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5260:180:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5260:180:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1671:182:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1671:182:26;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1671:182:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;300:750:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;300:750:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;300:750:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6079:132:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6079:132:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6079:132:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2436:148:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2436:148:26;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2436:148:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1402:107:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1402:107:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1402:107:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1903:666;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1903:666:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1903:666:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2530:177:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2530:177:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2530:177:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;614:58:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;614:58:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;614:58:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:150:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2156:150:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2156:150:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1347:137:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1347:137:24;;;;;;1296:102:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1296:102:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1296:102:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;659:77:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;659:77:24;;;;;;;;;;;;;;;;;;;;;;;;;;;979:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;979:90:24;;;;;;;;;;;;;;;;;;;;;;;;;;;1215:87:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1215:87:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1215:87:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4148:213:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4148:213:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4148:213:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;585:25:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;585:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;6916:211:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6916:211:25;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6916:211:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6916:211:25;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6916:211:25;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6916:211:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6916:211:25;;;;;;;;;;;;;;;;;;1501:151:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1501:151:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1501:151:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1501:151:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1051:138:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1051:138:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1051:138:1;;;;;;;;;;;;;;;;;;;;;;1193:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1193:99:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1193:99:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1513:386;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1513:386:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1513:386:1;;;;;;;;;;;;;;;;;;;;2573:512;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2573:512:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2573:512:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4682:145:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4682:145:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4682:145:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1655:107:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1655:107:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1655:107:24;;;;;;;;;;;;;;;;;;;;;;778:133:21;848:4;871:20;:33;892:11;871:33;;;;;;;;;;;;;;;;;;;;;;;;;;;864:40;;778:133;;;:::o;1024:83:28:-;1063:13;1095:5;1088:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:83;:::o;3705:151:25:-;3764:7;3791:16;3799:7;3791;:16::i;:::-;3783:25;;;;;;;;3825:15;:24;3841:7;3825:24;;;;;;;;;;;;;;;;;;;;;3818:31;;3705:151;;;:::o;3128:292::-;3191:13;3207:16;3215:7;3207;:16::i;:::-;3191:32;;3247:5;3241:11;;:2;:11;;;;3233:20;;;;;;;;3285:5;3271:19;;:10;:19;;;:58;;;;3294:35;3311:5;3318:10;3294:16;:35::i;:::-;3271:58;3263:67;;;;;;;;3368:2;3341:15;:24;3357:7;3341:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;3405:7;3401:2;3385:28;;3394:5;3385:28;;;;;;;;;;;;3128:292;;;:::o;2005:94:26:-;2049:7;2075:10;:17;;;;2068:24;;2005:94;:::o;676:46:1:-;;;;;;;;;;;;;;;;;:::o;5260:180:25:-;5350:39;5369:10;5381:7;5350:18;:39::i;:::-;5342:48;;;;;;;;5401:32;5415:4;5421:2;5425:7;5401:13;:32::i;:::-;5260:180;;;:::o;1671:182:26:-;1751:7;1786:16;1796:5;1786:9;:16::i;:::-;1778:5;:24;1770:33;;;;;;;;1820:12;:19;1833:5;1820:19;;;;;;;;;;;;;;;1840:5;1820:26;;;;;;;;;;;;;;;;;;1813:33;;1671:182;;;;:::o;300:750:0:-;382:4;396:19;425:10;;;;;;;;;;;396:40;;442:25;494:5;442:60;;508:13;524:17;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;524:25:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;524:25:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;524:25:0;;;;;;;;;;;;;;;;508:41;;637:5;612:30;;:12;:16;;;629:3;612:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;612:21:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;612:21:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;612:21:0;;;;;;;;;;;;;;;;:30;;;604:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;759:10;750:19;;:5;:19;;;742:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;871:3;845:14;:19;860:3;845:19;;;;;;;;;;;:23;;:29;;;;906:10;880:14;:19;895:3;880:19;;;;;;;;;;;:23;;;:36;;;;;;;;;;;;;;;;;;950:16;922:14;:19;937:3;922:19;;;;;;;;;;;:25;;;:44;;;;;;;;;;;;;;;;;;;;;;;;978:50;985:10;997:3;1002:14;:19;1017:3;1002:19;;;;;;;;;;;:25;;;;;;;;;;;;978:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1041:4;1034:11;;;;;300:750;;;;:::o;6079:132:25:-;6165:39;6182:4;6188:2;6192:7;6165:39;;;;;;;;;;;;;:16;:39::i;:::-;6079:132;;;:::o;2436:148:26:-;2494:7;2529:13;:11;:13::i;:::-;2521:5;:21;2513:30;;;;;;;;2560:10;2571:5;2560:17;;;;;;;;;;;;;;;;;;2553:24;;2436:148;;;:::o;1402:107:1:-;1455:9;1479:14;:19;1494:3;1479:19;;;;;;;;;;;:25;;;;;;;;;;;;1472:32;;1402:107;;;:::o;1903:666::-;1954:11;1975:19;2004:10;;;;;;;;;;;1975:40;;2058:19;2029:48;;;;;;;;:14;:19;2044:3;2029:19;;;;;;;;;;;:25;;;;;;;;;;;;:48;;;;;;;;;;2021:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2171:10;2144:37;;:14;:19;2159:3;2144:19;;;;;;;;;;;:23;;;;;;;;;;;;:37;;;2136:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2275:4;2242:38;;:12;:16;;;2259:3;2242:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2242:21:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2242:21:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2242:21:1;;;;;;;;;;;;;;;;:38;;;2234:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2361:19;:12;:17;:19::i;:::-;2355:25;;2386:22;2392:10;2404:3;2386:5;:22::i;:::-;2441:3;2415:14;:19;2430:3;2415:19;;;;;;;;;;;:23;;:29;;;;2478:17;2450:14;:19;2465:3;2450:19;;;;;;;;;;;:25;;;:45;;;;;;;;;;;;;;;;;;;;;;;;2521:3;2502:11;:16;2514:3;2502:16;;;;;;;;;;;:22;;;;2535:29;2543:10;2555:3;2560;2535:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1903:666;;;;:::o;2530:177:25:-;2585:7;2604:13;2620:11;:20;2632:7;2620:20;;;;;;;;;;;;;;;;;;;;;2604:36;;2675:1;2658:19;;:5;:19;;;;2650:28;;;;;;;;2695:5;2688:12;;;2530:177;;;:::o;614:58:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2156:150:25:-;2211:7;2255:1;2238:19;;:5;:19;;;;2230:28;;;;;;;;2275:17;:24;2293:5;2275:24;;;;;;;;;;;;;;;;2268:31;;2156:150;;;:::o;1347:137:24:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1445:1;1408:40;;1429:6;;;;;;;;;;;1408:40;;;;;;;;;;;;1475:1;1458:6;;:19;;;;;;;;;;;;;;;;;;1347:137::o;1296:102:1:-;1348:7;1370:14;:19;1385:3;1370:19;;;;;;;;;;;:23;;;1363:30;;1296:102;;;:::o;659:77:24:-;697:7;723:6;;;;;;;;;;;716:13;;659:77;:::o;979:90::-;1019:4;1056:6;;;;;;;;;;;1042:20;;:10;:20;;;1035:27;;979:90;:::o;1215:87:28:-;1256:13;1288:7;1281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1215:87;:::o;4148:213:25:-;4233:10;4227:16;;:2;:16;;;;4219:25;;;;;;;;4291:8;4254:18;:30;4273:10;4254:30;;;;;;;;;;;;;;;:34;4285:2;4254:34;;;;;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;4341:2;4314:40;;4329:10;4314:40;;;4345:8;4314:40;;;;;;;;;;;;;;;;;;;;;;4148:213;;:::o;585:25:1:-;;;;;;;;;;;;;:::o;6916:211:25:-;7022:31;7035:4;7041:2;7045:7;7022:12;:31::i;:::-;7071:48;7094:4;7100:2;7104:7;7113:5;7071:22;:48::i;:::-;7063:57;;;;;;;;6916:211;;;;:::o;1501:151:28:-;1559:13;1592:16;1600:7;1592;:16::i;:::-;1584:25;;;;;;;;1626:10;:19;1637:7;1626:19;;;;;;;;;;;1619:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1501:151;;;:::o;1051:138:1:-;1130:7;:5;:7::i;:::-;1116:21;;:10;:21;;;1108:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1173:11;1160:10;;:24;;;;;;;;;;;;;;;;;;1051:138;:::o;1193:99::-;1247:7;1269:11;:18;1281:5;1269:18;;;;;;;;;;;;1262:25;;1193:99;;;:::o;1513:386::-;1569:19;1598:10;;;;;;;;;;;1569:40;;1648:10;1623:35;;:12;:16;;;1640:3;1623:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1623:21:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1623:21:1;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1623:21:1;;;;;;;;;;;;;;;;:35;;;1615:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1738:3;1712:14;:19;1727:3;1712:19;;;;;;;;;;;:23;;:29;;;;1773:10;1747:14;:19;1762:3;1747:19;;;;;;;;;;;:23;;;:36;;;;;;;;;;;;;;;;;;1817:16;1789:14;:19;1804:3;1789:19;;;;;;;;;;;:25;;;:44;;;;;;;;;;;;;;;;;;;;;;;;1844:50;1851:10;1863:3;1868:14;:19;1883:3;1868:19;;;;;;;;;;;:25;;;;;;;;;;;;1844:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1513:386;;:::o;2573:512::-;2626:4;2640:19;2669:10;;;;;;;;;;;2640:40;;2686:11;2700;:16;2712:3;2700:16;;;;;;;;;;;;2686:30;;2745:12;2753:3;2745:7;:12::i;:::-;2731:26;;:10;:26;;;2723:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2805:12;:17;;;2823:3;2828:10;2805:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2805:34:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2805:34:1;;;;2952:10;2958:3;2952:5;:10::i;:::-;2968:11;:16;2980:3;2968:16;;;;;;;;;;;;3018:19;2990:14;:19;3005:3;2990:19;;;;;;;;;;;:25;;;:47;;;;;;;;;;;;;;;;;;;;;;;;3049:31;3059:10;3071:3;3076;3049:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2573:512;;;;;:::o;4682:145:25:-;4762:4;4785:18;:25;4804:5;4785:25;;;;;;;;;;;;;;;:35;4811:8;4785:35;;;;;;;;;;;;;;;;;;;;;;;;;4778:42;;4682:145;;;;:::o;1655:107:24:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;7316:152:25:-;7373:4;7389:13;7405:11;:20;7417:7;7405:20;;;;;;;;;;;;;;;;;;;;;7389:36;;7459:1;7442:19;;:5;:19;;;;7435:26;;;7316:152;;;:::o;7831:246::-;7916:4;7932:13;7948:16;7956:7;7948;:16::i;:::-;7932:32;;7993:5;7982:16;;:7;:16;;;:51;;;;8026:7;8002:31;;:20;8014:7;8002:11;:20::i;:::-;:31;;;7982:51;:87;;;;8037:32;8054:5;8061:7;8037:16;:32::i;:::-;7982:87;7974:96;;;7831:246;;;;:::o;2958:239:26:-;3043:38;3063:4;3069:2;3073:7;3043:19;:38::i;:::-;3092:47;3125:4;3131:7;3092:32;:47::i;:::-;3150:40;3178:2;3182:7;3150:27;:40::i;:::-;2958:239;;;:::o;741:129:20:-;796:7;832:1;815:5;:13;;;:18;;;;;;;;;;;850:5;:13;;;843:20;;741:129;;;:::o;3452:196:26:-;3515:24;3527:2;3531:7;3515:11;:24::i;:::-;3550:40;3578:2;3582:7;3550:27;:40::i;:::-;3601;3633:7;3601:31;:40::i;:::-;3452:196;;:::o;10744:347:25:-;10865:4;10890:15;:2;:13;;;:15::i;:::-;10889:16;10885:58;;;10928:4;10921:11;;;;10885:58;10953:13;10985:2;10969:36;;;11006:10;11018:4;11024:7;11033:5;10969:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10969:70:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10969:70:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10969:70:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10969:70:25;;;;;;;;;;;;;;;;10953:86;;658:10;11067:16;;11057:26;;;:6;:26;;;;11049:35;;;10744:347;;;;;;;:::o;9355:90::-;9406:32;9412:16;9420:7;9412;:16::i;:::-;9430:7;9406:5;:32::i;:::-;9355:90;:::o;1906:183:24:-;1999:1;1979:22;;:8;:22;;;;1971:31;;;;;;;;2046:8;2017:38;;2038:6;;;;;;;;;;;2017:38;;;;;;;;;;;;2074:8;2065:6;;:17;;;;;;;;;;;;;;;;;;1906:183;:::o;9819:402:25:-;9932:4;9912:24;;:16;9920:7;9912;:16::i;:::-;:24;;;9904:33;;;;;;;;9969:1;9955:16;;:2;:16;;;;9947:25;;;;;;;;9983:23;9998:7;9983:14;:23::i;:::-;10043:30;10071:1;10043:17;:23;10061:4;10043:23;;;;;;;;;;;;;;;;:27;;:30;;;;:::i;:::-;10017:17;:23;10035:4;10017:23;;;;;;;;;;;;;;;:56;;;;10107:28;10133:1;10107:17;:21;10125:2;10107:21;;;;;;;;;;;;;;;;:25;;:28;;;;:::i;:::-;10083:17;:21;10101:2;10083:21;;;;;;;;;;;;;;;:52;;;;10169:2;10146:11;:20;10158:7;10146:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;10206:7;10202:2;10187:27;;10196:4;10187:27;;;;;;;;;;;;9819:402;;;:::o;6060:1128:26:-;6322:22;6347:32;6377:1;6347:12;:18;6360:4;6347:18;;;;;;;;;;;;;;;:25;;;;:29;;:32;;;;:::i;:::-;6322:57;;6389:18;6410:17;:26;6428:7;6410:26;;;;;;;;;;;;6389:47;;6554:14;6540:10;:28;;6536:323;;;6584:19;6606:12;:18;6619:4;6606:18;;;;;;;;;;;;;;;6625:14;6606:34;;;;;;;;;;;;;;;;;;6584:56;;6688:11;6655:12;:18;6668:4;6655:18;;;;;;;;;;;;;;;6674:10;6655:30;;;;;;;;;;;;;;;;;:44;;;;6804:10;6771:17;:30;6789:11;6771:30;;;;;;;;;;;:43;;;;6536:323;;6945:12;:18;6958:4;6945:18;;;;;;;;;;;;;;;:27;;;;;;;;;;;;:::i;:::-;;6060:1128;;;;:::o;4906:183::-;5019:12;:16;5032:2;5019:16;;;;;;;;;;;;;;;:23;;;;4990:17;:26;5008:7;4990:26;;;;;;;;;;;:52;;;;5052:12;:16;5065:2;5052:16;;;;;;;;;;;;;;;5074:7;5052:30;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;5052:30:26;;;;;;;;;;;;;;;;;;;;;;4906:183;;:::o;8320:278:25:-;8405:1;8391:16;;:2;:16;;;;8383:25;;;;;;;;8427:16;8435:7;8427;:16::i;:::-;8426:17;8418:26;;;;;;;;8478:2;8455:11;:20;8467:7;8455:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;8514:28;8540:1;8514:17;:21;8532:2;8514:21;;;;;;;;;;;;;;;;:25;;:28;;;;:::i;:::-;8490:17;:21;8508:2;8490:21;;;;;;;;;;;;;;;:52;;;;8583:7;8579:2;8558:33;;8575:1;8558:33;;;;;;;;;;;;8320:278;;:::o;5284:161:26:-;5387:10;:17;;;;5360:15;:24;5376:7;5360:24;;;;;;;;;;;:44;;;;5414:10;5430:7;5414:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;5414:24:26;;;;;;;;;;;;;;;;;;;;;;5284:161;:::o;463:616:33:-;523:4;539:12;1038:7;1026:20;1018:28;;1071:1;1064:4;:8;1057:15;;;463:616;;;:::o;2323:240:28:-;2389:27;2401:5;2408:7;2389:11;:27::i;:::-;2503:1;2472:10;:19;2483:7;2472:19;;;;;;;;;;;2466:33;;;;;;;;;;;;;;;;:38;;2462:95;;;2527:10;:19;2538:7;2527:19;;;;;;;;;;;;2520:26;;;;:::i;:::-;2462:95;2323:240;;:::o;11252:171:25:-;11351:1;11315:38;;:15;:24;11331:7;11315:24;;;;;;;;;;;;;;;;;;;;;:38;;;;11311:106;;;11404:1;11369:15;:24;11385:7;11369:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;11311:106;11252:171;:::o;1205:145:23:-;1263:7;1295:1;1290;:6;;1282:15;;;;;;;;1307:9;1323:1;1319;:5;1307:17;;1342:1;1335:8;;;1205:145;;;;:::o;1431:::-;1489:7;1508:9;1524:1;1520;:5;1508:17;;1548:1;1543;:6;;1535:15;;;;;;;;1568:1;1561:8;;;1431:145;;;;:::o;3920:364:26:-;3986:27;3998:5;4005:7;3986:11;:27::i;:::-;4024:48;4057:5;4064:7;4024:32;:48::i;:::-;4220:1;4191:17;:26;4209:7;4191:26;;;;;;;;;;;:30;;;;4232:45;4269:7;4232:36;:45::i;:::-;3920:364;;:::o;8871:305:25:-;8965:5;8945:25;;:16;8953:7;8945;:16::i;:::-;:25;;;8937:34;;;;;;;;8982:23;8997:7;8982:14;:23::i;:::-;9043:31;9072:1;9043:17;:24;9061:5;9043:24;;;;;;;;;;;;;;;;:28;;:31;;;;:::i;:::-;9016:17;:24;9034:5;9016:24;;;;;;;;;;;;;;;:58;;;;9115:1;9084:11;:20;9096:7;9084:20;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;9161:7;9157:1;9133:36;;9142:5;9133:36;;;;;;;;;;;;8871:305;;:::o;7476:1064:26:-;7725:22;7750:24;7772:1;7750:10;:17;;;;:21;;:24;;;;:::i;:::-;7725:49;;7784:18;7805:15;:24;7821:7;7805:24;;;;;;;;;;;;7784:45;;8151:19;8173:10;8184:14;8173:26;;;;;;;;;;;;;;;;;;8151:48;;8235:11;8210:10;8221;8210:22;;;;;;;;;;;;;;;;;:36;;;;8345:10;8314:15;:28;8330:11;8314:28;;;;;;;;;;;:41;;;;8476:10;:19;;;;;;;;;;;;:::i;:::-;;8532:1;8505:15;:24;8521:7;8505:24;;;;;;;;;;;:28;;;;7476:1064;;;;:::o;179:873:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport { DSProxy } from './lib/dappsys-monolithic/proxy.sol';\nimport { ISaiTub as SaiTub } from './lib/sai/ITub.sol';\n\nimport './DeftyWrap.sol';\n\ncontract DeftyProxyWrap is DeftyWrap {\n\n  constructor(address tubAddress_)\n    DeftyWrap(tubAddress_)\n    public\n  {}\n\n  function prooveProxyOwnerShip(bytes32 cup, address proxy)\n    public\n    returns (bool)\n  {\n    SaiTub untrustedMkr = SaiTub(tubAddress);\n    DSProxy untrustedSaiProxy = DSProxy(address(uint160(proxy)));\n    address owner = untrustedSaiProxy.owner();\n\n    // and if the proxy is the owner of the cup\n    require(untrustedMkr.lad(cup) == proxy, 'The msg.sender is not the owner of the CDP');\n    // if owner is authorized to use the proxy\n    require(owner == msg.sender, 'Unauthorised, msg.sender is not the authorized to use this proxy');\n\n    proofRegistery[cup].cup = cup;\n    proofRegistery[cup].lad = msg.sender;\n    proofRegistery[cup].state = WrapState.Proved;\n\n    emit Proved(msg.sender, cup, proofRegistery[cup].state);\n    return true;\n  }\n}\n",
  "sourcePath": "/Users/vilsbole/Developer/defty/contracts/contracts/DeftyProxyWrap.sol",
  "ast": {
    "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/DeftyProxyWrap.sol",
    "exportedSymbols": {
      "DeftyProxyWrap": [
        103
      ]
    },
    "id": 104,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:0"
      },
      {
        "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/lib/dappsys-monolithic/proxy.sol",
        "file": "./lib/dappsys-monolithic/proxy.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 104,
        "sourceUnit": 2063,
        "src": "33:61:0",
        "symbolAliases": [
          {
            "foreign": 2,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/lib/sai/ITub.sol",
        "file": "./lib/sai/ITub.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 104,
        "sourceUnit": 3218,
        "src": "95:55:0",
        "symbolAliases": [
          {
            "foreign": 4,
            "local": "SaiTub"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/DeftyWrap.sol",
        "file": "./DeftyWrap.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 104,
        "sourceUnit": 447,
        "src": "152:25:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "DeftyWrap",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 446,
              "src": "206:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DeftyWrap_$446",
                "typeString": "contract DeftyWrap"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "206:9:0"
          }
        ],
        "contractDependencies": [
          446,
          3367,
          3377,
          3614,
          4173,
          4508,
          4532,
          4659,
          4762,
          4789,
          4812
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 103,
        "linearizedBaseContracts": [
          103,
          446,
          4532,
          4659,
          4812,
          4508,
          4789,
          4173,
          4762,
          3367,
          3377,
          3614
        ],
        "name": "DeftyProxyWrap",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 16,
              "nodeType": "Block",
              "src": "294:2:0",
              "statements": []
            },
            "documentation": null,
            "id": 17,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 13,
                    "name": "tubAddress_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10,
                    "src": "268:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 14,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 12,
                  "name": "DeftyWrap",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 446,
                  "src": "258:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_DeftyWrap_$446_$",
                    "typeString": "type(contract DeftyWrap)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "258:22:0"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "tubAddress_",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "233:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "233:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "232:21:0"
            },
            "returnParameters": {
              "id": 15,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "294:0:0"
            },
            "scope": 103,
            "src": "221:75:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 101,
              "nodeType": "Block",
              "src": "390:660:0",
              "statements": [
                {
                  "assignments": [
                    27
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 27,
                      "name": "untrustedMkr",
                      "nodeType": "VariableDeclaration",
                      "scope": 101,
                      "src": "396:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ISaiTub_$3145",
                        "typeString": "contract ISaiTub"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 26,
                        "name": "SaiTub",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 3145,
                        "src": "396:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ISaiTub_$3145",
                          "typeString": "contract ISaiTub"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 31,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 29,
                        "name": "tubAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 135,
                        "src": "425:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28,
                      "name": "SaiTub",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3145,
                      "src": "418:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ISaiTub_$3145_$",
                        "typeString": "type(contract ISaiTub)"
                      }
                    },
                    "id": 30,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "418:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISaiTub_$3145",
                      "typeString": "contract ISaiTub"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "396:40:0"
                },
                {
                  "assignments": [
                    33
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33,
                      "name": "untrustedSaiProxy",
                      "nodeType": "VariableDeclaration",
                      "scope": 101,
                      "src": "442:25:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_DSProxy_$1934",
                        "typeString": "contract DSProxy"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 32,
                        "name": "DSProxy",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1934,
                        "src": "442:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DSProxy_$1934",
                          "typeString": "contract DSProxy"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 41,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 37,
                                "name": "proxy",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21,
                                "src": "494:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 36,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "486:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint160_$",
                                "typeString": "type(uint160)"
                              },
                              "typeName": "uint160"
                            },
                            "id": 38,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "486:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          ],
                          "id": 35,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "478:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 39,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "478:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 34,
                      "name": "DSProxy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1934,
                      "src": "470:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_DSProxy_$1934_$",
                        "typeString": "type(contract DSProxy)"
                      }
                    },
                    "id": 40,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "470:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_DSProxy_$1934",
                      "typeString": "contract DSProxy"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "442:60:0"
                },
                {
                  "assignments": [
                    43
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 43,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 101,
                      "src": "508:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 42,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "508:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 47,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 44,
                        "name": "untrustedSaiProxy",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33,
                        "src": "524:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DSProxy_$1934",
                          "typeString": "contract DSProxy"
                        }
                      },
                      "id": 45,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "owner",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 532,
                      "src": "524:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 46,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "524:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "508:41:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 51,
                              "name": "cup",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19,
                              "src": "629:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 49,
                              "name": "untrustedMkr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 27,
                              "src": "612:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ISaiTub_$3145",
                                "typeString": "contract ISaiTub"
                              }
                            },
                            "id": 50,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lad",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3141,
                            "src": "612:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 52,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "612:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 53,
                          "name": "proxy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21,
                          "src": "637:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "612:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "546865206d73672e73656e646572206973206e6f7420746865206f776e6572206f662074686520434450",
                        "id": 55,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "644:44:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1a90fe76650304777cfd50df4c89af73aa44c8ad387c56ccf74e64307490220b",
                          "typeString": "literal_string \"The msg.sender is not the owner of the CDP\""
                        },
                        "value": "The msg.sender is not the owner of the CDP"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1a90fe76650304777cfd50df4c89af73aa44c8ad387c56ccf74e64307490220b",
                          "typeString": "literal_string \"The msg.sender is not the owner of the CDP\""
                        }
                      ],
                      "id": 48,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4865,
                        4866
                      ],
                      "referencedDeclaration": 4866,
                      "src": "604:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "604:85:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "604:85:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 62,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 59,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 43,
                          "src": "750:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 60,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4862,
                            "src": "759:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 61,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "759:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "750:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "556e617574686f72697365642c206d73672e73656e646572206973206e6f742074686520617574686f72697a656420746f2075736520746869732070726f7879",
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "771:66:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_94b0489b36a45531d83246a669526770700e8170bf9095d2b6f0d674fbd56562",
                          "typeString": "literal_string \"Unauthorised, msg.sender is not the authorized to use this proxy\""
                        },
                        "value": "Unauthorised, msg.sender is not the authorized to use this proxy"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_94b0489b36a45531d83246a669526770700e8170bf9095d2b6f0d674fbd56562",
                          "typeString": "literal_string \"Unauthorised, msg.sender is not the authorized to use this proxy\""
                        }
                      ],
                      "id": 58,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4865,
                        4866
                      ],
                      "referencedDeclaration": 4866,
                      "src": "742:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "742:96:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 65,
                  "nodeType": "ExpressionStatement",
                  "src": "742:96:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 71,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 66,
                          "name": "proofRegistery",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 139,
                          "src": "845:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                            "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                          }
                        },
                        "id": 68,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 67,
                          "name": "cup",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "860:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "845:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                          "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                        }
                      },
                      "id": 69,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "cup",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 126,
                      "src": "845:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 70,
                      "name": "cup",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "871:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "845:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 72,
                  "nodeType": "ExpressionStatement",
                  "src": "845:29:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 79,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 73,
                          "name": "proofRegistery",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 139,
                          "src": "880:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                            "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                          }
                        },
                        "id": 75,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 74,
                          "name": "cup",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "895:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "880:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                          "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                        }
                      },
                      "id": 76,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lad",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 130,
                      "src": "880:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 77,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4862,
                        "src": "906:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 78,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "906:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "880:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 80,
                  "nodeType": "ExpressionStatement",
                  "src": "880:36:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 81,
                          "name": "proofRegistery",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 139,
                          "src": "922:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                            "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                          }
                        },
                        "id": 83,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 82,
                          "name": "cup",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "937:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "922:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                          "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                        }
                      },
                      "id": 84,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "922:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_WrapState_$124",
                        "typeString": "enum DeftyWrap.WrapState"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 85,
                        "name": "WrapState",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "950:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_WrapState_$124_$",
                          "typeString": "type(enum DeftyWrap.WrapState)"
                        }
                      },
                      "id": 86,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "Proved",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "950:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_WrapState_$124",
                        "typeString": "enum DeftyWrap.WrapState"
                      }
                    },
                    "src": "922:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_WrapState_$124",
                      "typeString": "enum DeftyWrap.WrapState"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "922:44:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 90,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4862,
                          "src": "985:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "985:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 92,
                        "name": "cup",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19,
                        "src": "997:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 93,
                            "name": "proofRegistery",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 139,
                            "src": "1002:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                              "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                            }
                          },
                          "id": 95,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 94,
                            "name": "cup",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "1017:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1002:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                            "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                          }
                        },
                        "id": 96,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "state",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 132,
                        "src": "1002:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_WrapState_$124",
                          "typeString": "enum DeftyWrap.WrapState"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_enum$_WrapState_$124",
                          "typeString": "enum DeftyWrap.WrapState"
                        }
                      ],
                      "id": 89,
                      "name": "Proved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 151,
                      "src": "978:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_enum$_WrapState_$124_$returns$__$",
                        "typeString": "function (address,bytes32,enum DeftyWrap.WrapState)"
                      }
                    },
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "978:50:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 98,
                  "nodeType": "EmitStatement",
                  "src": "973:55:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1041:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 25,
                  "id": 100,
                  "nodeType": "Return",
                  "src": "1034:11:0"
                }
              ]
            },
            "documentation": null,
            "id": 102,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "prooveProxyOwnerShip",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "name": "cup",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "330:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "330:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21,
                  "name": "proxy",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "343:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "343:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "329:28:0"
            },
            "returnParameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "382:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 23,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "382:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "381:6:0"
            },
            "scope": 103,
            "src": "300:750:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 104,
        "src": "179:873:0"
      }
    ],
    "src": "0:1053:0"
  },
  "legacyAST": {
    "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/DeftyProxyWrap.sol",
    "exportedSymbols": {
      "DeftyProxyWrap": [
        103
      ]
    },
    "id": 104,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:0"
      },
      {
        "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/lib/dappsys-monolithic/proxy.sol",
        "file": "./lib/dappsys-monolithic/proxy.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 104,
        "sourceUnit": 2063,
        "src": "33:61:0",
        "symbolAliases": [
          {
            "foreign": 2,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/lib/sai/ITub.sol",
        "file": "./lib/sai/ITub.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 104,
        "sourceUnit": 3218,
        "src": "95:55:0",
        "symbolAliases": [
          {
            "foreign": 4,
            "local": "SaiTub"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/vilsbole/Developer/defty/contracts/contracts/DeftyWrap.sol",
        "file": "./DeftyWrap.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 104,
        "sourceUnit": 447,
        "src": "152:25:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7,
              "name": "DeftyWrap",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 446,
              "src": "206:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DeftyWrap_$446",
                "typeString": "contract DeftyWrap"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "206:9:0"
          }
        ],
        "contractDependencies": [
          446,
          3367,
          3377,
          3614,
          4173,
          4508,
          4532,
          4659,
          4762,
          4789,
          4812
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 103,
        "linearizedBaseContracts": [
          103,
          446,
          4532,
          4659,
          4812,
          4508,
          4789,
          4173,
          4762,
          3367,
          3377,
          3614
        ],
        "name": "DeftyProxyWrap",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 16,
              "nodeType": "Block",
              "src": "294:2:0",
              "statements": []
            },
            "documentation": null,
            "id": 17,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 13,
                    "name": "tubAddress_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10,
                    "src": "268:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 14,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 12,
                  "name": "DeftyWrap",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 446,
                  "src": "258:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_DeftyWrap_$446_$",
                    "typeString": "type(contract DeftyWrap)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "258:22:0"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "name": "tubAddress_",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "233:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "233:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "232:21:0"
            },
            "returnParameters": {
              "id": 15,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "294:0:0"
            },
            "scope": 103,
            "src": "221:75:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 101,
              "nodeType": "Block",
              "src": "390:660:0",
              "statements": [
                {
                  "assignments": [
                    27
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 27,
                      "name": "untrustedMkr",
                      "nodeType": "VariableDeclaration",
                      "scope": 101,
                      "src": "396:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ISaiTub_$3145",
                        "typeString": "contract ISaiTub"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 26,
                        "name": "SaiTub",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 3145,
                        "src": "396:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ISaiTub_$3145",
                          "typeString": "contract ISaiTub"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 31,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 29,
                        "name": "tubAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 135,
                        "src": "425:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 28,
                      "name": "SaiTub",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3145,
                      "src": "418:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ISaiTub_$3145_$",
                        "typeString": "type(contract ISaiTub)"
                      }
                    },
                    "id": 30,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "418:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISaiTub_$3145",
                      "typeString": "contract ISaiTub"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "396:40:0"
                },
                {
                  "assignments": [
                    33
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33,
                      "name": "untrustedSaiProxy",
                      "nodeType": "VariableDeclaration",
                      "scope": 101,
                      "src": "442:25:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_DSProxy_$1934",
                        "typeString": "contract DSProxy"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 32,
                        "name": "DSProxy",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1934,
                        "src": "442:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DSProxy_$1934",
                          "typeString": "contract DSProxy"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 41,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 37,
                                "name": "proxy",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21,
                                "src": "494:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 36,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "486:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint160_$",
                                "typeString": "type(uint160)"
                              },
                              "typeName": "uint160"
                            },
                            "id": 38,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "486:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          ],
                          "id": 35,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "478:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 39,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "478:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 34,
                      "name": "DSProxy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1934,
                      "src": "470:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_DSProxy_$1934_$",
                        "typeString": "type(contract DSProxy)"
                      }
                    },
                    "id": 40,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "470:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_DSProxy_$1934",
                      "typeString": "contract DSProxy"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "442:60:0"
                },
                {
                  "assignments": [
                    43
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 43,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 101,
                      "src": "508:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 42,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "508:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 47,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 44,
                        "name": "untrustedSaiProxy",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33,
                        "src": "524:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DSProxy_$1934",
                          "typeString": "contract DSProxy"
                        }
                      },
                      "id": 45,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "owner",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 532,
                      "src": "524:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 46,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "524:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "508:41:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 51,
                              "name": "cup",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19,
                              "src": "629:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 49,
                              "name": "untrustedMkr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 27,
                              "src": "612:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ISaiTub_$3145",
                                "typeString": "contract ISaiTub"
                              }
                            },
                            "id": 50,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lad",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3141,
                            "src": "612:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 52,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "612:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 53,
                          "name": "proxy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21,
                          "src": "637:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "612:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "546865206d73672e73656e646572206973206e6f7420746865206f776e6572206f662074686520434450",
                        "id": 55,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "644:44:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1a90fe76650304777cfd50df4c89af73aa44c8ad387c56ccf74e64307490220b",
                          "typeString": "literal_string \"The msg.sender is not the owner of the CDP\""
                        },
                        "value": "The msg.sender is not the owner of the CDP"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1a90fe76650304777cfd50df4c89af73aa44c8ad387c56ccf74e64307490220b",
                          "typeString": "literal_string \"The msg.sender is not the owner of the CDP\""
                        }
                      ],
                      "id": 48,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4865,
                        4866
                      ],
                      "referencedDeclaration": 4866,
                      "src": "604:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 56,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "604:85:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 57,
                  "nodeType": "ExpressionStatement",
                  "src": "604:85:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 62,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 59,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 43,
                          "src": "750:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 60,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4862,
                            "src": "759:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 61,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "759:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "750:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "556e617574686f72697365642c206d73672e73656e646572206973206e6f742074686520617574686f72697a656420746f2075736520746869732070726f7879",
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "771:66:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_94b0489b36a45531d83246a669526770700e8170bf9095d2b6f0d674fbd56562",
                          "typeString": "literal_string \"Unauthorised, msg.sender is not the authorized to use this proxy\""
                        },
                        "value": "Unauthorised, msg.sender is not the authorized to use this proxy"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_94b0489b36a45531d83246a669526770700e8170bf9095d2b6f0d674fbd56562",
                          "typeString": "literal_string \"Unauthorised, msg.sender is not the authorized to use this proxy\""
                        }
                      ],
                      "id": 58,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4865,
                        4866
                      ],
                      "referencedDeclaration": 4866,
                      "src": "742:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "742:96:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 65,
                  "nodeType": "ExpressionStatement",
                  "src": "742:96:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 71,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 66,
                          "name": "proofRegistery",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 139,
                          "src": "845:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                            "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                          }
                        },
                        "id": 68,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 67,
                          "name": "cup",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "860:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "845:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                          "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                        }
                      },
                      "id": 69,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "cup",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 126,
                      "src": "845:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 70,
                      "name": "cup",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19,
                      "src": "871:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "845:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 72,
                  "nodeType": "ExpressionStatement",
                  "src": "845:29:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 79,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 73,
                          "name": "proofRegistery",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 139,
                          "src": "880:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                            "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                          }
                        },
                        "id": 75,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 74,
                          "name": "cup",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "895:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "880:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                          "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                        }
                      },
                      "id": 76,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lad",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 130,
                      "src": "880:23:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 77,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4862,
                        "src": "906:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 78,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "906:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "880:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 80,
                  "nodeType": "ExpressionStatement",
                  "src": "880:36:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 87,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 81,
                          "name": "proofRegistery",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 139,
                          "src": "922:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                            "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                          }
                        },
                        "id": 83,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 82,
                          "name": "cup",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "937:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "922:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                          "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                        }
                      },
                      "id": 84,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 132,
                      "src": "922:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_WrapState_$124",
                        "typeString": "enum DeftyWrap.WrapState"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 85,
                        "name": "WrapState",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 124,
                        "src": "950:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_WrapState_$124_$",
                          "typeString": "type(enum DeftyWrap.WrapState)"
                        }
                      },
                      "id": 86,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "Proved",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "950:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_WrapState_$124",
                        "typeString": "enum DeftyWrap.WrapState"
                      }
                    },
                    "src": "922:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_WrapState_$124",
                      "typeString": "enum DeftyWrap.WrapState"
                    }
                  },
                  "id": 88,
                  "nodeType": "ExpressionStatement",
                  "src": "922:44:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 90,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4862,
                          "src": "985:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "985:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 92,
                        "name": "cup",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 19,
                        "src": "997:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 93,
                            "name": "proofRegistery",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 139,
                            "src": "1002:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ProofOfOwnership_$133_storage_$",
                              "typeString": "mapping(bytes32 => struct DeftyWrap.ProofOfOwnership storage ref)"
                            }
                          },
                          "id": 95,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 94,
                            "name": "cup",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 19,
                            "src": "1017:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1002:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ProofOfOwnership_$133_storage",
                            "typeString": "struct DeftyWrap.ProofOfOwnership storage ref"
                          }
                        },
                        "id": 96,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "state",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 132,
                        "src": "1002:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_WrapState_$124",
                          "typeString": "enum DeftyWrap.WrapState"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_enum$_WrapState_$124",
                          "typeString": "enum DeftyWrap.WrapState"
                        }
                      ],
                      "id": 89,
                      "name": "Proved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 151,
                      "src": "978:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_enum$_WrapState_$124_$returns$__$",
                        "typeString": "function (address,bytes32,enum DeftyWrap.WrapState)"
                      }
                    },
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "978:50:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 98,
                  "nodeType": "EmitStatement",
                  "src": "973:55:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 99,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1041:4:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 25,
                  "id": 100,
                  "nodeType": "Return",
                  "src": "1034:11:0"
                }
              ]
            },
            "documentation": null,
            "id": 102,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "prooveProxyOwnerShip",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "name": "cup",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "330:11:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "330:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21,
                  "name": "proxy",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "343:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "343:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "329:28:0"
            },
            "returnParameters": {
              "id": 25,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 102,
                  "src": "382:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 23,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "382:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "381:6:0"
            },
            "scope": 103,
            "src": "300:750:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 104,
        "src": "179:873:0"
      }
    ],
    "src": "0:1053:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {
    "42": {
      "events": {},
      "links": {},
      "address": "0x27aC989a513D17c68Ed41Ea447bCD337beD0A97D",
      "transactionHash": "0x705d91202102693ee1d09e50b0391ded7f257c01e73dedb74cacb6cb5a9166ad"
    },
    "999": {
      "events": {},
      "links": {},
      "address": "0x33Da3E834fED3880bE7736946A046C1DA2b87040",
      "transactionHash": "0x45334f6ea97224b8e76840a190f5cd4bdb0139e8dc3ad89140291011d7b161c8"
    }
  },
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-02-12T17:22:46.488Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "return": "uint256 token ID at the given index of the tokens list"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "return": "uint256 token ID at the given index of the tokens list owned by the requested address"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "return": "uint256 representing the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}